/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.windesheim.kbsm2.opc01.tsp;

import nl.windesheim.kbsm2.opc01.tsp.BruteForce.DynProgram;

import java.awt.GridLayout;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JCheckBox;

/**
 *
 * @author Gebruiker
 */
public class MainScreen extends javax.swing.JFrame
{

    private ArrayList<CheckBox> boxReference = new ArrayList<CheckBox>();
    private DynProgram bruteForce;
    private TSPNearestNeighbour nearestNeighbour = new TSPNearestNeighbour();
    private TSPSnake tspSnake;
    private DistanceMap map = new DistanceMap();
    private ResultatenScherm s = new ResultatenScherm(this, false);     
    private Point checkboxSizes;
    private ArrayList<Packet> currentList;
    private ArrayList<Packet> allPackets;

    public MainScreen()
    {

        initComponents();
        setTitle("TSP Simulatie");
    }

    public ArrayList<CheckBox> getBoxReference()
    {
        return boxReference;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jBruteForce = new javax.swing.JCheckBox();
        jNearestNeigbour = new javax.swing.JCheckBox();
        jSnake = new javax.swing.JCheckBox();
        jStart = new javax.swing.JButton();
        jSettings = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Route"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );

        jBruteForce.setText("Brute Force");

        jNearestNeigbour.setText("Nearest Neighbour");

        jSnake.setText("Snake");
        jSnake.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jSnakeActionPerformed(evt);
            }
        });

        jStart.setText("Start Simulatie");
        jStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jStartActionPerformed(evt);
            }
        });

        jSettings.setText("Instelling");
        jSettings.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jSettingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBruteForce)
                        .addGap(18, 18, 18)
                        .addComponent(jNearestNeigbour)
                        .addGap(18, 18, 18)
                        .addComponent(jSnake)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jSettings)
                        .addGap(18, 18, 18)
                        .addComponent(jStart)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jStart)
                    .addComponent(jSettings)
                    .addComponent(jBruteForce)
                    .addComponent(jNearestNeigbour)
                    .addComponent(jSnake))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSettingsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSettingsActionPerformed
    {//GEN-HEADEREND:event_jSettingsActionPerformed
        Options options = new Options(this, true);
        options.setVisible(true);
        jPanel1.removeAll();
        boxReference.clear();
        if (options.created)
        {
            GridLayout jPanelLayout = new GridLayout(options.hight, options.width);
            jPanel1.setLayout(jPanelLayout);

            for (int i = 0; i < options.hight; i++)
            {
                for (int ii = 0; ii < options.width; ii++)
                {
                    int z = i - options.hight;
                    int x = ii + 1;
                    CheckBox box = new CheckBox(x + "." + -z, x, -z);
                    boxReference.add(box);

                }
            }
            for (CheckBox a : boxReference)
            {
                jPanel1.add(a);
            }
            
            checkboxSizes = new Point(options.hight, options.width);
            jPanel1.revalidate();
            jPanel1.repaint();

        }

    }//GEN-LAST:event_jSettingsActionPerformed

    class CheckBox extends JCheckBox
    {

        private Packet packet;

        public CheckBox(String name, int x, int y)
        {
            super(name);
            this.packet = new Packet(x, y);
        }

        public Packet getPacket()
        {
            return packet;
        }
    }
    private void jStartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jStartActionPerformed
    {//GEN-HEADEREND:event_jStartActionPerformed
        boolean hasBeenPressed = false;

        if (!hasBeenPressed)
        {

            ArrayList<Packet> list = new ArrayList<Packet>();
            list.add(new Packet(0, 0));
            for (CheckBox a : boxReference)
            {
                if (a.isSelected())
                {
                    a.packet.setGetPacket(true);
                    list.add(a.getPacket());
                }
            }

            map.createMatrix(list);
            s.setVisible(true);            
            currentList = list;

        }

        if (jBruteForce.isSelected())
        {

            DynProgram bruteForce = new DynProgram();
            long timeStart = System.nanoTime();
            bruteForce.activate(map.getMap());
            String length = String.valueOf(bruteForce.getLeast_value());
            long timeEnd = System.nanoTime();
            long time = timeEnd - timeStart;
            String timeS = String.valueOf(time);
            s.getBfDistance().setText(length);
            s.getBfTime().setText(timeS);
            s.revalidate();

        }
        if (jNearestNeigbour.isSelected())
        {
            long timeStart = System.nanoTime();
            nearestNeighbour.tsp(map.getMap());
            long timeEnd = System.nanoTime();
            long time = timeEnd - timeStart;
            String length = String.valueOf(nearestNeighbour.getLengthOfPath());
            String timeS = String.valueOf(time);
            s.getNnDistance().setText(length);
            s.getNnTime().setText(timeS);
            s.revalidate();

        }
        if (jSnake.isSelected())
        {
            
            long timeStart = System.nanoTime();
            tspSnake = new TSPSnake(map.getMap(), currentList, checkboxSizes);
            tspSnake.SnakeAlgorithm();
            tspSnake.calculatePathLength(map.getMap());
            String length = String.valueOf(tspSnake.getLengthOfPath());
            long timeEnd = System.nanoTime();
            long time = timeEnd - timeStart;
            String timeS = String.valueOf(time);
            s.getgDistance().setText(length);
            s.getgTime().setText(timeS);
            s.revalidate();
            
        }        
        currentList.clear();
    }//GEN-LAST:event_jStartActionPerformed

    private void jSnakeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSnakeActionPerformed
    {//GEN-HEADEREND:event_jSnakeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jSnakeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jBruteForce;
    private javax.swing.JCheckBox jNearestNeigbour;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jSettings;
    private javax.swing.JCheckBox jSnake;
    private javax.swing.JButton jStart;
    // End of variables declaration//GEN-END:variables
}
